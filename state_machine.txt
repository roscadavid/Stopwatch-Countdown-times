
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;


entity state_machine is
    Port ( ck : in STD_LOGIC;
           btn_run : in STD_LOGIC;
           btn_stop : in STD_LOGIC;
           btn_rst : in STD_LOGIC;
           btn_change : in STD_LOGIC;
           time_up:in std_logic;
           en1 : out STD_LOGIC;
           en2 : out STD_LOGIC;
           rst1 : out STD_LOGIC;
           rst2 : out STD_LOGIC);
end state_machine;

architecture Behavioral of state_machine is
type state_type is (res_timer, run_timer, stop_timer1, stop_timer2, res_chrono, run_chrono, stop_chrono1, stop_chrono2);--definim un nou tip de date pentru stari
signal state:state_type:=res_chrono;
signal next_state:state_type;
begin

reg:process(ck)
begin
    if rising_edge(ck) then
        state<=next_state;--la fiecare front ascendent de ceas starea curenta primeste valoarea starii urmatoare
    end if;
end process;

next_st:process(state, btn_run, btn_stop, btn_rst, btn_change, time_up)--automat de stare
begin
next_state<=state;--pastreaza stare
case state is
    when res_chrono=>
    if btn_run='1' then
        next_state<=run_chrono;
    end if;
    when run_chrono=>
    if btn_stop='1' then
        next_state<=stop_chrono1;
    end if;
    when stop_chrono1=>
    if btn_rst='1' then
        next_state<=res_chrono;
    elsif btn_change='1' then 
        next_state<=stop_timer2;
    end if;
    when stop_timer2=>
    if btn_rst='1' then
        next_state<=res_timer;
    end if;
    when res_timer=>
    if btn_run='1' then
        next_state<=run_timer;
    end if;
    when run_timer=>
    if btn_stop='1' or time_up='1' then
        next_state<=stop_timer1;
    end if;
    when stop_timer1=>
    if btn_change='1' then
        next_state<=stop_chrono2;
    elsif btn_rst='1' then
        next_state<=res_timer;
    end if;
    when stop_chrono2=>
    if btn_rst='1' then
        next_state<=res_chrono;
    end if;
    when others=>
    next_state<=res_chrono;
end case;

end process;

with state select--logica de iesire, in functie de stare definim semnalele de iesire en1, en2, rst1, rst2
rst1<='1' when res_chrono,
     '0' when others;
with state select
rst2<='1' when res_timer,
     '0' when others;
with state select
en1<='1' when run_chrono,
     '0' when others; 
with state select
en2<='1' when run_timer,
     '0' when others;


end Behavioral;
