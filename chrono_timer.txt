


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity chrono_timer is
    Port ( ck : in STD_LOGIC;
           rst1 : in STD_LOGIC;
           rst2:in std_logic;
           en1 : in STD_LOGIC;
           en2 : in STD_LOGIC;
           sw:in unsigned(15 downto 0);
           data : out unsigned (15 downto 0);
           time_up:out std_logic);
end chrono_timer;

architecture Behavioral of chrono_timer is

constant const_div:integer:=10**6;--constnta de divizare a frecventei de ceas, fck de pe basys3=100MHZ
signal cnt_div:integer range 0 to const_div-1;--numaratorul pentru divizorul de frecventa
signal ck_div:std_logic;--frecventa de ceas obtinuta in urma divizarii=100Hz
signal cnt_bcd:unsigned(15 downto 0);--numaratorul pentru cronometru si timer

begin

--divizor de frecventa
div_ck:process(ck, rst1, rst2)
begin 
    if rst1='1' or rst2='1' then
        cnt_div<=0;
    elsif rising_edge(ck) and (en1='1' or en2='1') then
        if cnt_div=const_div-1 then
            cnt_div<=0;
            ck_div<='1';
        else
            cnt_div<=cnt_div+1;
            ck_div<='0';
        end if;
    end if;
end process;

num_bcd:process(ck_div, rst1)--numarator pentru cronometru si timer
begin--p/u cronometru avem en1 si rst1, p/u timer avem en2 si rst2
    if rst1='1' then
        cnt_bcd<=(others=>'0');
    elsif rst2='1' then--incarcam valoarea de pe switch-uri
        time_up<='0';--nu s-a terminat inca timpul
        if sw(3 downto 0)>9 then--limitare a valorii cifrei la 9, in caz ca incarcam de pe switch-uri o valoare mai mare ca 9, o cifra ii pe 4 biti
            cnt_bcd(3 downto 0)<="1001";
        else
            cnt_bcd(3 downto 0) <= sw(3 downto 0);
        end if;
        if sw(7 downto 4)>9 then
            cnt_bcd(7 downto 4)<="1001";
        else
            cnt_bcd(7 downto 4) <= sw(7 downto 4);
        end if;
       if sw(11 downto 8)>9 then
            cnt_bcd(11 downto 8)<="1001";
       else
            cnt_bcd(11 downto 8) <= sw(11 downto 8);
       end if;
       if sw(15 downto 12)>9 then
            cnt_bcd(15 downto 12)<="1001";
       else
            cnt_bcd(15 downto 12) <= sw(15 downto 12);
       end if;--se termina codul pentru incarcarea de pe switch-uri
    elsif rising_edge(ck_div) then
        if en1='1' then--incepe sa numere cronometrul
            if cnt_bcd(3 downto 0)="1001" then
            cnt_bcd(3 downto 0)<="0000";
                if cnt_bcd(7 downto 4)="1001" then
                cnt_bcd(7 downto 4)<="0000";
                if cnt_bcd(11 downto 8)="1001" then
                    cnt_bcd(11 downto 8)<="0000";
                    if cnt_bcd(15 downto 12)="1001" then
                        cnt_bcd(15 downto 12)<="0000";
                    else
                        cnt_bcd(15 downto 12)<=cnt_bcd(15 downto 12)+1;
                    end if;
                else
                    cnt_bcd(11 downto 8)<=cnt_bcd(11 downto 8)+1;
                end if;
           else 
                cnt_bcd(7 downto 4)<=cnt_bcd(7 downto 4)+1;
           end if;
        else
            cnt_bcd(3 downto 0)<=cnt_bcd(3 downto 0)+1;
        end if;  
        elsif en2='1' then--incepe sa numere descendent timerul
            if cnt_bcd>"0000000000000000" then
        if cnt_bcd(3 downto 0)="0000" then
             cnt_bcd(3 downto 0)<="1001";
             if cnt_bcd(7 downto 4)="0000" then
                cnt_bcd(7 downto 4)<="1001";
                if cnt_bcd(11 downto 8)="0000" then
                    cnt_bcd(11 downto 8)<="1001";
                    cnt_bcd(15 downto 12)<=cnt_bcd(15 downto 12)-1;
                else
                    cnt_bcd(11 downto 8)<=cnt_bcd(11 downto 8)-1;
                end if;
             else
                cnt_bcd(7 downto 4)<=cnt_bcd(7 downto 4)-1;
             end if;
        else
            cnt_bcd(3 downto 0)<=cnt_bcd(3 downto 0)-1;
        end if;  
    else 
        time_up<='1'; --s a terminat timpul  !intarziere de o perioada a clock ului divizat
    end if;
        end if;      
    end if;
end process;





--cnt:process(ck_div, rst2)
--begin
--if rst2='1' then
----    cnt_bcd<=sw;
--    time_up<='0';--nu s-a terminat inca timpul
--    if sw(3 downto 0)>9 then
--        cnt_bcd(3 downto 0)<="1001";
--        else
--        cnt_bcd(3 downto 0) <= sw(3 downto 0);
--    end if;
--       if sw(7 downto 4)>9 then
--        cnt_bcd(7 downto 4)<="1001";
--        else
--        cnt_bcd(7 downto 4) <= sw(7 downto 4);
--    end if;
--       if sw(11 downto 8)>9 then
--        cnt_bcd(11 downto 8)<="1001";
--        else
--        cnt_bcd(11 downto 8) <= sw(11 downto 8);
--    end if;
--       if sw(15 downto 12)>9 then
--        cnt_bcd(15 downto 12)<="1001";
--        else
--        cnt_bcd(15 downto 12) <= sw(15 downto 12);
--    end if;

--elsif rising_edge(ck_div) and en2='1' then
--    if cnt_bcd>"0000000000000000" then
--        if cnt_bcd(3 downto 0)="0000" then
--             cnt_bcd(3 downto 0)<="1001";
--             if cnt_bcd(7 downto 4)="0000" then
--                cnt_bcd(7 downto 4)<="1001";
--                if cnt_bcd(11 downto 8)="0000" then
--                    cnt_bcd(11 downto 8)<="1001";
--                    cnt_bcd(15 downto 12)<=cnt_bcd(15 downto 12)-1;
--                else
--                    cnt_bcd(11 downto 8)<=cnt_bcd(11 downto 8)-1;
--                end if;
--             else
--                cnt_bcd(7 downto 4)<=cnt_bcd(7 downto 4)-1;
--             end if;
--        else
--            cnt_bcd(3 downto 0)<=cnt_bcd(3 downto 0)-1;
--        end if;  
--    else 
--        time_up<='1'; --s a terminat timpul  !intarziere de o perioada a clock ului divizat
--    end if;
--end if;
--end process;

data<=cnt_bcd;
end Behavioral;
